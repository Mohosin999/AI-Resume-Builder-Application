import React, { useContext, useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { toast } from "sonner";
import { Brain, LoaderCircle } from "lucide-react";
import { AIChatSession } from "../../../../../../service/AIModal";
import { ResumeInfoContext } from "../../../../../context/ResumeInfoContext";
import GlobalApi from "../../../../../../service/GlobalApi";
import { Button } from "../../../../../components/ui/button";
import { Textarea } from "../../../../../components/ui/textarea";

// Prompt to create summary from AI
const PROMPT =
  "Job Title: {jobTitle}, Depends on job title give me summary for my resume within 4-5 lines in JSON format with field experience Level and summary with Experience level for Fresher, Mid-Level and Experienced";

/**
 * summary Component
 *
 * @param {Function} setEnableNext - It will be a function
 * @returns {JSX.Element}
 */
const Summary = ({ setEnableNext }) => {
  // States
  const [summary, setSummary] = useState();
  const [loading, setLoading] = useState(false);
  const [aiGeneratedSummaryList, setAiGeneratedSummaryList] = useState();

  console.log("state ->", aiGeneratedSummaryList);

  // Destructuring resume information from useContext
  const { resumeInfo, setResumeInfo } = useContext(ResumeInfoContext);

  // Get the resume id from url
  const params = useParams();

  // Effect to update the resumeInfo when summary will change
  useEffect(() => {
    console.log("summary ", summary);
    console.log("resume sum Info ", resumeInfo);

    summary &&
      setResumeInfo({
        ...resumeInfo,
        attributes: {
          ...resumeInfo?.attributes,
          summary: summary,
        },
      });
  }, [summary]);

  /**
   * ================================================
   * Asynchronous function to create summary from AI
   * ================================================
   */
  const GenerateSummaryFromAI = async () => {
    setLoading(true);
    // Job title will be the title input by the user
    const prompt = PROMPT.replace("{jobTitle}", resumeInfo?.jobTitle);

    // Store the result after generated by AI
    const result = await AIChatSession.sendMessage(prompt);
    // Get the actual text from the result
    const responseData = result.response.text();
    console.log("responseData ", responseData);
    console.log("responseData ", JSON.parse(responseData));

    try {
      /**
       * responseData is a JSON
       * Make it object using JSON.parse()
       * Make the object an array using Object.values()
       */
      const parsedData = Object.values(JSON.parse(responseData));
      // If parseData is an array, save it inside aiGeneratedSummaryList
      if (Array.isArray(parsedData)) {
        setAiGeneratedSummaryList(parsedData);
      } else {
        console.error("Expected an array but got:", parsedData);
      }
    } catch (error) {
      console.error("Error parsing JSON:", error);
    }

    setLoading(false);
  };

  /**
   * ====================================================
   * Function to handle the saving of the resume summary
   * ====================================================
   */
  const handleSave = (e) => {
    e.preventDefault();
    setLoading(true);

    // Define a data variable with the form data
    const data = {
      data: {
        summary: summary,
      },
    };

    GlobalApi.UpdateResumeDetails(params?.resumeId, data).then(
      (res) => {
        setEnableNext(true);
        setLoading(false);
        toast("summary Updated Successfully!");
      },
      (error) => {
        setLoading(false);
      }
    );
  };

  return (
    <div>
      <div className="p-5 rounded-lg shadow-lg border-t-primary border-t-4 mt-10">
        {/* Heading */}
        <h2 className="font-bold text-lg">Summary</h2>
        <p>Add summary for your job title</p>

        {/*
         * =====================================================
         *                   summary Form
         * =====================================================
         */}
        <form onSubmit={handleSave} className="mt-7">
          {/* Generate from AI button */}
          <div className="flex justify-between items-end">
            <label>Add summary</label>
            <Button
              size="sm"
              variant="outline"
              type="button"
              onClick={() => GenerateSummaryFromAI()}
              className="border-primary text-primary flex gap-2"
            >
              <Brain className="w-4 h-4" /> Generate from AI
            </Button>
          </div>

          {/* Textarea */}
          <Textarea
            className="mt-5"
            required
            defaultValue={resumeInfo?.attributes?.summary}
            // onChange={(e) => setSummary(e.target.value)}
            onChange={(e) => {
              setEnableNext(false);
              setSummary(e.target.value);
            }}
          />

          {/* Save button */}
          <div className="mt-2 flex justify-end">
            <Button type="submit" size="sm" disabled={loading}>
              {loading ? <LoaderCircle className="animate-spin" /> : "Save"}
            </Button>
          </div>
        </form>
      </div>

      {/*
       * =====================================================
       *           Suggestions of Generated Summary
       * =====================================================
       */}
      {aiGeneratedSummaryList && (
        <div>
          <h2 className="font-bold text-lg mt-5">Suggestions</h2>

          {aiGeneratedSummaryList.map((item, index) => (
            <div key={index} className="my-4">
              {/* <h3 className="font-bold">{item?.experienceLevel}</h3>
              <p className="text-sm">{item?.summary}</p> */}
              <h3 className="font-bold">{item["Experience Level"]}</h3>
              <p className="text-sm">{item?.Summary}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Summary;
